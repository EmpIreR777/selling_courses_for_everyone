import asyncio
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import settings, bot
from bot.dao.dao import UserDAO, ProductDao, PurchaseDao, CategoryDao
from bot.admin.kbs import (admin_kb, admin_kb_back, product_management_kb,
                        cancel_kb_inline, catalog_admin_kb,
                        admin_send_file_kb, admin_confirm_kb, dell_product_kb)
from bot.admin.schemas import ProductIDModel, ProductModel
from bot.admin.utils import process_dell_next_msg


admin_router = Router()


class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    file_id = State()
    category_id = State()
    hidden_content = State()
    confirm_add = State()


@admin_router.callback_query(
        F.data == 'admin_panel', F.from_user.id == settings.ADMIN_ID)
async def start_admin(call: CallbackQuery):
    await call.answer('–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à—ë–Ω!')
    await call.message.edit_text(
        text='–í–∞–º —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
        reply_markup=admin_kb()
    )


@admin_router.callback_query(F.data == 'statistic', F.from_user.id == settings.ADMIN_ID)
async def admin_statistic(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–ó–∞–ø—Ä–æ—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
    await call.answer('üìä –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
    stats = await UserDAO.get_statistics(session=session_without_commit)
    total_sum = await PurchaseDao.get_full_sum(session=session_without_commit)
    stats_message = (
        'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n'
        f'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n'
        f'üÜï –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['new_today']}\n'
        f'üìÖ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_week']}\n'
        f'üìÜ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['new_month']}\n\n'
        f'üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_sum} —Ä—É–±.\n\n'
        'üïí –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.'
    )
    await call.message.edit_text(
        text=stats_message, reply_markup=admin_kb()
    )


@admin_router.callback_query(
    F.data == 'process_products', F.from_user.id == settings.ADMIN_ID)
async def admin_process_products(
    call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏')
    all_products_count = await ProductDao.count(session=session_without_commit)
    await call.message.edit_text(
        text=f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {all_products_count} —Ç–æ–≤–∞—Ä–æ–≤. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
        reply_markup=product_management_kb()
    )


@admin_router.callback_query(
    F.data == 'delete_product', F.from_user.id == settings.ADMIN_ID)
async def admin_process_start_dell(
    call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤')
    all_products = await ProductDao.find_all(session=session_without_commit)
    await call.message.edit_text(
        text=f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏–Ω–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'
    )
    for product_data in all_products:
        file_id = product_data.file_id
        file_text = 'üì¶ –¢–æ–≤–∞—Ä —Å —Ñ–∞–π–ª–æ–º' if file_id else 'üìÑ –¢–æ–≤–∞—Ä –±–µ–∑ —Ñ–∞–π–ª–∞'
    product_text = (f'üõí –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n'
                    f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <b>{product_data.name}</b>\n'
                    f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n<b>{product_data.description}</b>\n\n'
                    f'üîπ <b>–¶–µ–Ω–∞:</b> <b>{product_data.price} ‚ÇΩ</b>\n'
                    f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ (–∑–∞–∫—Ä—ã—Ç–æ–µ):</b>\n\n<b>{product_data.hidden_content}</b>\n\n'
                    f'<b>{file_text}</b>')
    if file_id:
        await call.message.answer_document(
            document=file_id, caption=product_text,
            reply_markup=dell_product_kb(product_data.id)
            )
    else:
        await call.message.answer(
            text=product_text, reply_markup=dell_product_kb(product_data.id)
        )

@admin_router.callback_query(
    F.data.startswith('dell_'), F.from_user.id == settings.ADMIN_ID)
async def admin_process_start_dell(
    call: CallbackQuery, session_with_commit: AsyncSession):
    product_id = int(call.data.split('_')[-1])
    await ProductDao.delete(session=session_with_commit,
                             filters=ProductIDModel(id=product_id))
    await call.answer(f'–¢–æ–≤–∞—Ä –ø–æ ID {product_id} —É–¥–∞–ª–µ–Ω!', show_alert=True)
    await call.message.delete()